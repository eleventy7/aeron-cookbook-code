/*
 * Copyright 2019-2021 Shaun Laurens.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0' apply false
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
        vendor = JvmVendorSpec.AZUL
    }
}

defaultTasks 'clean', 'build', 'test', 'shadowJar'

def cookbookSampleGroup = 'com.aeroncookbook'
def cookbookSampleVersion = '0.1-SNAPSHOT'
def javaVersion = JavaVersion.VERSION_16
def AERON_VERSION = '1.34.0'
def AGRONA_VERSION = '1.11.0'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'

    group cookbookSampleGroup
    version cookbookSampleVersion

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.net=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    compileTestJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/java.net=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'])
        options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.31'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.4'
        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.44'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.2'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
    }

    tasks.withType(Checkstyle) {
        checkstyle {
            configFile = "${rootDir}/config/checks.xml" as File
            configProperties = ["suppressionFile": "${rootDir}/config/suppressions.xml"]
            toolVersion = '8.43'
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
        jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

project('ipc-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }
}

project('agrona') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
    }
}

project('theory') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
}

project('archive-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }

}

project('archive-multi-host:archive-client') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.archive.multihost.ArchiveClient'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }
}

project('archive-multi-host:archive-host') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.archive.multihost.ArchiveHost'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }
}

project('aeron-mdc:aeron-mdc-subscriber') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.aeron.mdc.MultiDestinationSubscriber'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }
}

project('aeron-mdc:aeron-mdc-publisher') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.aeron.mdc.MultiDestinationPublisher'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }
}

project('archive-replication:common') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
    }
}

project('archive-replication:archive-client') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.archive.replication.ArchiveClient'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        implementation project(':archive-replication:common')
    }

}

project('archive-replication:archive-host') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.archive.replication.ArchiveHost'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        implementation project(':archive-replication:common')
    }

}


project('archive-replication:archive-backup') {
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName='com.aeroncookbook.archive.replication.ArchiveReplicator'

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        implementation project(':archive-replication:common')
    }

}

project('cluster-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    def folder = "../eider-spec/build/generated/sources/annotationProcessor/java/main/"
    def folderDest = "${projectDir}/src/main/generated/"

    task cleanUpJmh(type: Delete) {
        delete 'build/generated/sources/annotationProcessor/java/jmh','src/jmh/generated'
        followSymlinks = false
    }

    configurations {
        generatedEider
    }

    sourceSets {
        generatedEider {
            java {
                folderDest
            }
        }
        main {
            java {
                srcDirs = ['src/main/java', folderDest]
            }
        }
        jmh {
            java.srcDirs += 'src/jmh/java'
            java.srcDirs += folderDest
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
    }

    tasks.withType(Checkstyle) {
        exclude 'src/jmh/java'
    }

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        generatedEider group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
        jmhImplementation project
        jmhImplementation "org.openjdk.jmh:jmh-core:1.32"
        jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.32"
    }

    compileJava {
        dependsOn cleanUpJmh
    }

    task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
        classpath = sourceSets.jmh.runtimeClasspath
        mainClass = 'org.openjdk.jmh.Main'
    }
}

project('aeron-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    configurations{
        codecGeneration
    }

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += configurations.codecGeneration
        }
    }

    dependencies {
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        implementation group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
        api files('build/classes/java/generated')
        codecGeneration "uk.co.real-logic:sbe-tool:1.23.0"
    }

    compileJava.dependsOn 'compileGeneratedJava'
    compileGeneratedJava.dependsOn 'generateCodecs'

    task generateCodecs(type: JavaExec) {
        def codecsFile = 'src/main/resources/messages.xml'
        def sbeFile = 'src/main/resources/sbe/sbe.xsd'

        inputs.files(codecsFile, sbeFile)
        outputs.dir generatedDir

        mainClass = 'uk.co.real_logic.sbe.SbeTool'
        classpath = configurations.codecGeneration
        systemProperties(
                'sbe.output.dir': generatedDir,
                'sbe.target.language': 'Java',
                'sbe.validation.xsd': sbeFile,
                'sbe.validation.stop.on.error': 'true')
        args = [codecsFile]
    }
}

project(':sbe-protocol') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
        implementation "uk.co.real-logic:sbe-tool:1.23.0"
        testImplementation sourceSets.generated.output
    }

    compileGeneratedJava {
        dependsOn 'generateMessages'
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    task generateMessages(type: JavaExec) {
        mainClass = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties('sbe.output.dir': generatedDir,
                'sbe.target.language': 'Java',
                'sbe.validation.stop.on.error': 'true',
                'sbe.validation.xsd': 'src/main/resources/sbe/sbe.xsd')
        args = [
                'src/main/resources/messages.xml'
        ]
    }

    jar.dependsOn compileGeneratedJava
}

project('sbe-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
        implementation project(path: ':sbe-protocol')
    }

    idea {
        dependencies {
            implementation project(':sbe-protocol').sourceSets.generated.output
        }
    }
}
